/*******************
 Author: Dee Reddy (deesus@yandex.com)
 *******************/

//////////////////////////////
//      Sass Functions      //
//////////////////////////////

@mixin flex-shorthand($flex-grow, $flex-shrink, $flex-basis) {
  -webkit-flex:     $flex-grow $flex-shrink $flex-basis;
  -ms-flex:         $flex-grow $flex-shrink $flex-basis;
  -webkit-box-flex: $flex-grow $flex-shrink $flex-basis;     // UNTESTED: changed from `-webkit-box-flex: $flex-grow`
  flex:             $flex-grow $flex-shrink $flex-basis;
}

@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -ms-flex-direction:     $direction;
  flex-direction:         $direction;
}

@mixin display-as-flex {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: -webkit-box;
  display: flex;
}

/**************
 Resets
 **************/
/* TODO: create own resets (as separate file) */

* {
  margin: 0;
  padding: 0;
}

html {
  box-sizing: border-box;
}

*, *::before, *::after {
  box-sizing: inherit;
}

body {
  font-family: Helvetica, sans-serif;
}

a {
  text-decoration: none;
  color: inherit;
}

/**************
 Grid System
 **************/
/* NOTE: images inside columns must be wrapped in separate div to prevent vertical stretching */
.row {
  @include display-as-flex;

  /* reset flex */
  @include flex-shorthand(0, 1, auto);

  /* short for flex-direction flex-wrap */
  -webkit-flex-flow: row wrap;
  -ms-flex-flow: row wrap;
  flex-flow: row wrap;

  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
}

[class ^= 'col-'] {
  /* reset flex -- don't readjust width of columns */
  @include flex-shorthand(0, 0, auto);

  /* display as flex */
  display: flex;
}

@for $i from 1 through 12 {
  .col-#{$i} {
    -ms-flex-preferred-size: ((100% / 12) * $i);    // `-ms-flex-preferred-size` is used for IE10 support
    -webkit-flex-basis: ((100% / 12) * $i);
    flex-basis: ((100% / 12) * $i);
    max-width: ((100% / 12) * $i);
  }
}

/*******************
 Utility Functions
 *******************/
/* horizontally align items inside a container: */
.h-center {
  display: flex;
  justify-content: center;
}

/* vertically align items inside a container: */
.v-center {
  display: flex;
  align-items: center;
}

/* container makes any/all child items equal in width
   (but content inside items can overflow if too long) */
.equal-width-divs > * {
  /* TODO: Is using flex better than simply using `width: 100%;`? */
  -webkit-flex: 1;
  -ms-flex: 1;
  -webkit-box-flex: 1;
  flex: 1;
}

/* container spaces all child content equally
   (but div widths will be different) */
.equally-spaced-content {
  justify-content: space-between;
}

/*  in certain cases, when we want to equally space items inside a column,
    `equally-spaced-content` and `equal-width-divs` won't work -- this resets the display.
    TODO: can't we just put this inside `equally-spaced-content` and `equal-width-divs`? */
.reset {
  @include display-as-flex;
  width: 100%
}

/* child items are aligned in a column */
.make-column {
  width: 100%;
  @include flex-direction(column);
  -webkit-box-orient: vertical;
}

/* use `.align-bottom` in conjunction w/ `.align-bottom-container` */
.align-bottom-container {
  @include display-as-flex;
  height: 100%;           /* This height property takes up its parent size (e.g. 197px from header) */
}

.align-bottom {
  width: 100%;
  align-self: flex-end;
}

/*******************
 Misc
 *******************/

img {
  /* image automatically resizes to max-width of the boundary: */
  max-width: 100%;
  height: auto;

  // removes the extra space on bottom of a div that contains an image:
  display: block;
}

/*******************
 Buttons
 *******************/

/*******************
 Menus
 *******************/
